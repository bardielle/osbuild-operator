// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// MessageResponse defines model for message-response.
type MessageResponse struct {
	// Content
	Content   *interface{} `json:"content,omitempty"`
	Directive *string      `json:"directive,omitempty"`
	MessageId *string      `json:"message_id,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /osbuildconfig/{osbuildconfig_namespace_name}/{osbuildconfig_cr_name}/webhooks/{secret}/generic)
	OSBuildConfigWebhookTriggers(ctx echo.Context, osbuildconfigNamespaceName string, osbuildconfigCrName string, secret string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OSBuildConfigWebhookTriggers converts echo context to params.
func (w *ServerInterfaceWrapper) OSBuildConfigWebhookTriggers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "osbuildconfig_namespace_name" -------------
	var osbuildconfigNamespaceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "osbuildconfig_namespace_name", runtime.ParamLocationPath, ctx.Param("osbuildconfig_namespace_name"), &osbuildconfigNamespaceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter osbuildconfig_namespace_name: %s", err))
	}

	// ------------- Path parameter "osbuildconfig_cr_name" -------------
	var osbuildconfigCrName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "osbuildconfig_cr_name", runtime.ParamLocationPath, ctx.Param("osbuildconfig_cr_name"), &osbuildconfigCrName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter osbuildconfig_cr_name: %s", err))
	}

	// ------------- Path parameter "secret" -------------
	var secret string

	err = runtime.BindStyledParameterWithLocation("simple", false, "secret", runtime.ParamLocationPath, ctx.Param("secret"), &secret)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter secret: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OSBuildConfigWebhookTriggers(ctx, osbuildconfigNamespaceName, osbuildconfigCrName, secret)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/osbuildconfig/:osbuildconfig_namespace_name/:osbuildconfig_cr_name/webhooks/:secret/generic", wrapper.OSBuildConfigWebhookTriggers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RU32vbMBD+V4y2R8dK0w6Gn9ZlLZT9gmZjg1GKIl9sdbakneSELPh/HycpTdOEsLE3",
	"SXf3fXen727DpOms0aC9Y+WGOdlAJ8KxA+dEDSMEZ412QG8WjQX0CoKHNNqD9nSswElU1iujWcmmyTDk",
	"rFII0qtlCPdrC6xkzqPSNVkTx72qjpiHfPti5g8gfXhxIHtUfj2jRGMaogbtL3vf0EURfwOiAmQ506Kj",
	"+O+jGUgEP3oPa/aIKqyi+0CwSi/MtiQhQ0nQCdWyki1a4714g1A1whfSdDvc62DKogfLWY8U0HhvXcl5",
	"rXzTzymCWzRUwSh5Ul/2GvZ59rZXbZV9FFrU0FHvctYqCanvie/SCtlANinGe2Ql56vVqhDBWhiseQp1",
	"/MPN9OrT7Go0KcZF47uWqL3yLexI9ziXgC6mdFaMizG5GwtaWMVKdh6ecmaFb0LnuXFzgpBGL1TNN3vX",
	"e0raWSEhnIbnZonpfQXzxpifjm9c+KWB16ABlQyKM+6IwL6gqmsgmWQpOgvQLlsYzFJh08CTTW8dC1Wg",
	"oOibald69PgWERKmCwWi6MDTpfyxOfpXi4T+WGQ4sTwKkDq0k8mptrCcIfzqFULFSo895GkGjw7E8Vyq",
	"J7n8TQap8/9HHf/qBGd0+CeSO3KO2yboazIeP9szwtpWyfCR/MFRIpsneC8RFqxkL/huqfG00fjBOgtz",
	"v1/TrJcSnCPVT8avD2V32SKIap3dgjXooSLHi5jjvuMVosFoPTu0ftWi941B9XsLcX7odG1wrqoKdPS4",
	"OEHy6kQKNO+iJh0nEUQNsLshblNcblUe9wkXVm3Hmi/PGP1JAjgtvuntu+d6S1TD3fAnAAD//0oDTDdn",
	"BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
