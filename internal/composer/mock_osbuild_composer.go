// Code generated by MockGen. DO NOT EDIT.
// Source: generated_client.go

// Package composer is a generated GoMock package.
package composer

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	types "github.com/deepmap/oapi-codegen/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUploadOptions is a mock of UploadOptions interface.
type MockUploadOptions struct {
	ctrl     *gomock.Controller
	recorder *MockUploadOptionsMockRecorder
}

// MockUploadOptionsMockRecorder is the mock recorder for MockUploadOptions.
type MockUploadOptionsMockRecorder struct {
	mock *MockUploadOptions
}

// NewMockUploadOptions creates a new mock instance.
func NewMockUploadOptions(ctrl *gomock.Controller) *MockUploadOptions {
	mock := &MockUploadOptions{ctrl: ctrl}
	mock.recorder = &MockUploadOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadOptions) EXPECT() *MockUploadOptionsMockRecorder {
	return m.recorder
}

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetComposeLogs mocks base method.
func (m *MockClientInterface) GetComposeLogs(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeLogs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeLogs indicates an expected call of GetComposeLogs.
func (mr *MockClientInterfaceMockRecorder) GetComposeLogs(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeLogs", reflect.TypeOf((*MockClientInterface)(nil).GetComposeLogs), varargs...)
}

// GetComposeManifests mocks base method.
func (m *MockClientInterface) GetComposeManifests(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeManifests", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeManifests indicates an expected call of GetComposeManifests.
func (mr *MockClientInterfaceMockRecorder) GetComposeManifests(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeManifests", reflect.TypeOf((*MockClientInterface)(nil).GetComposeManifests), varargs...)
}

// GetComposeMetadata mocks base method.
func (m *MockClientInterface) GetComposeMetadata(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeMetadata", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeMetadata indicates an expected call of GetComposeMetadata.
func (mr *MockClientInterfaceMockRecorder) GetComposeMetadata(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeMetadata", reflect.TypeOf((*MockClientInterface)(nil).GetComposeMetadata), varargs...)
}

// GetComposeStatus mocks base method.
func (m *MockClientInterface) GetComposeStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeStatus indicates an expected call of GetComposeStatus.
func (mr *MockClientInterfaceMockRecorder) GetComposeStatus(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeStatus", reflect.TypeOf((*MockClientInterface)(nil).GetComposeStatus), varargs...)
}

// GetError mocks base method.
func (m *MockClientInterface) GetError(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetError", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetError indicates an expected call of GetError.
func (mr *MockClientInterfaceMockRecorder) GetError(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockClientInterface)(nil).GetError), varargs...)
}

// GetErrorList mocks base method.
func (m *MockClientInterface) GetErrorList(ctx context.Context, params *GetErrorListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetErrorList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorList indicates an expected call of GetErrorList.
func (mr *MockClientInterfaceMockRecorder) GetErrorList(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorList", reflect.TypeOf((*MockClientInterface)(nil).GetErrorList), varargs...)
}

// GetOpenapi mocks base method.
func (m *MockClientInterface) GetOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenapi", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenapi indicates an expected call of GetOpenapi.
func (mr *MockClientInterfaceMockRecorder) GetOpenapi(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenapi", reflect.TypeOf((*MockClientInterface)(nil).GetOpenapi), varargs...)
}

// PostCompose mocks base method.
func (m *MockClientInterface) PostCompose(ctx context.Context, body PostComposeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCompose", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCompose indicates an expected call of PostCompose.
func (mr *MockClientInterfaceMockRecorder) PostCompose(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCompose", reflect.TypeOf((*MockClientInterface)(nil).PostCompose), varargs...)
}

// PostComposeWithBody mocks base method.
func (m *MockClientInterface) PostComposeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostComposeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComposeWithBody indicates an expected call of PostComposeWithBody.
func (mr *MockClientInterfaceMockRecorder) PostComposeWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComposeWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostComposeWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetComposeLogsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetComposeLogsWithResponse(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*GetComposeLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeLogsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetComposeLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeLogsWithResponse indicates an expected call of GetComposeLogsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetComposeLogsWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeLogsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetComposeLogsWithResponse), varargs...)
}

// GetComposeManifestsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetComposeManifestsWithResponse(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*GetComposeManifestsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeManifestsWithResponse", varargs...)
	ret0, _ := ret[0].(*GetComposeManifestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeManifestsWithResponse indicates an expected call of GetComposeManifestsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetComposeManifestsWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeManifestsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetComposeManifestsWithResponse), varargs...)
}

// GetComposeMetadataWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetComposeMetadataWithResponse(ctx context.Context, id types.UUID, reqEditors ...RequestEditorFn) (*GetComposeMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeMetadataWithResponse", varargs...)
	ret0, _ := ret[0].(*GetComposeMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeMetadataWithResponse indicates an expected call of GetComposeMetadataWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetComposeMetadataWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeMetadataWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetComposeMetadataWithResponse), varargs...)
}

// GetComposeStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetComposeStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetComposeStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComposeStatusWithResponse", varargs...)
	ret0, _ := ret[0].(*GetComposeStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposeStatusWithResponse indicates an expected call of GetComposeStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetComposeStatusWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposeStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetComposeStatusWithResponse), varargs...)
}

// GetErrorListWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetErrorListWithResponse(ctx context.Context, params *GetErrorListParams, reqEditors ...RequestEditorFn) (*GetErrorListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetErrorListWithResponse", varargs...)
	ret0, _ := ret[0].(*GetErrorListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorListWithResponse indicates an expected call of GetErrorListWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetErrorListWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorListWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetErrorListWithResponse), varargs...)
}

// GetErrorWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetErrorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetErrorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetErrorWithResponse", varargs...)
	ret0, _ := ret[0].(*GetErrorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorWithResponse indicates an expected call of GetErrorWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetErrorWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetErrorWithResponse), varargs...)
}

// GetOpenapiWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenapiWithResponse", varargs...)
	ret0, _ := ret[0].(*GetOpenapiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenapiWithResponse indicates an expected call of GetOpenapiWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetOpenapiWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenapiWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetOpenapiWithResponse), varargs...)
}

// PostComposeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostComposeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComposeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostComposeWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostComposeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComposeWithBodyWithResponse indicates an expected call of PostComposeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostComposeWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComposeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostComposeWithBodyWithResponse), varargs...)
}

// PostComposeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostComposeWithResponse(ctx context.Context, body PostComposeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComposeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostComposeWithResponse", varargs...)
	ret0, _ := ret[0].(*PostComposeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComposeWithResponse indicates an expected call of PostComposeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostComposeWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComposeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostComposeWithResponse), varargs...)
}
